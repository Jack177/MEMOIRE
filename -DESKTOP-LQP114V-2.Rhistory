dis <- vegdist(sqrt (data_bee_sp), method = 'bray') # percentage cover data are transformed by square root
cluster.single <- hclust (d = dis, method = 'single')
cluster.complete <- hclust (dis, 'complete')
cluster.average <- hclust (dis, 'average')
heatmap(as.matrix(dis))
install.packages("pheatmap")
library("pheatmap")
pheatmap(dis, cutree_rows = 4)
library("pheatmap")
pheatmap(dis)
dis
abundance <- tibble('Bruant familier' = c(1, 0, 0, 3),
'Citelle à poitrine rousse' = c(1, 0, 0, 0),
'Colibri à gorge rubis' = c(0, 1, 0, 0),
'Geai bleu' = c(3, 2, 0, 0),
'Bruant chanteur' = c(1, 0, 5, 2),
'Chardonneret' = c(0, 9, 6, 0),
'Bruant à gorge blanche' = c(1, 0, 0, 0),
'Mésange à tête noire' = c(20, 1, 1, 0),
'Jaseur boréal' = c(66, 0, 0, 0))
View(abundance)
occurence <- abundance %>%
transmute_all(~if_else(. > 0, 1, 0))
abundance %>%
select(`Bruant chanteur`, Chardonneret, `Mésange à tête noire`)
spe[1:5, 2:4]
# Transform abundances
spe.pa <- decostand(spe, method = "pa")
spe.pa[1:5, 2:4]
spe.scal <- decostand(spe, "max")
spe.scal[1:5, 2:4]
# Display the maximum
dis <- vegdist(sqrt (data_bee_sp), method = 'bray', dia =TRUE) #
dis
View(abundance)
dis
library("pheatmap")
abundance_r <- t(abundance)
D_chisq_R <- as.matrix(dist(decostand(abundance_r, method="chi.square")))
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
library("pheatmap")
abundance_r <- t(data_bee_sp)
D_chisq_R <- as.matrix(dist(decostand(abundance_r, method="chi.square")))
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
library("pheatmap")
abundance_r <- (data_bee_sp)
D_chisq_R <- as.matrix(dist(decostand(abundance_r, method="chi.square")))
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
library("pheatmap")
abundance_r <- (data_bee_sp)
D_chisq_R <- as.matrix(dist(decostand(abundance_r, method="chi.square")))
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
library("pheatmap")
abundance_r <- (data_bee_sp)
D_chisq_R <- as.matrix(dist(decostand(abundance_r, method="bray")))
library("pheatmap")
abundance_r <- (data_bee_sp)
D_chisq_R <- as.matrix(dist(decostand(abundance_r, method="chi.square")))
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
library("pheatmap")
abundance_r <- (data_bee_sp)
D_chisq_R <- as.matrix(dis )
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
occurence <- data_bee_sp %>%
transmute_all(~if_else(. > 0, 1, 0))
occurence <- data_bee_sp %>%
transmute_all(~if_else(. > 0, 1, 0))
occurence <- as.data.frame(data_bee_sp) %>%
transmute_all(~if_else(. > 0, 1, 0))
occurence_r <- t(occurence)
D_jacc_R <- as.matrix(vegdist(occurence_r, method = "jaccard"))
pheatmap(D_jacc_R, display_numbers = round(D_jacc_R, 2))
occurence <- as.data.frame(data_bee_sp) %>%
transmute_all(~if_else(. > 0, 1, 0))
occurence_r <- (occurence)
D_jacc_R <- as.matrix(vegdist(occurence_r, method = "jaccard"))
pheatmap(D_jacc_R, display_numbers = round(D_jacc_R, 2))
abundance_r <- (data_bee_sp)
D_chisq_R <- as.matrix(dis )
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
occurence <- as.data.frame(data_bee_sp) %>%
transmute_all(~if_else(. > 0, 1, 0))
occurence_r <- (occurence)
D_jacc_R <- as.matrix(vegdist(occurence_r, method = "jaccard"))
pheatmap(D_jacc_R, display_numbers = round(D_jacc_R, 2))
View(D_chisq_R)
library("pheatmap")
dis <- vegdist(sqrt (data_bee_sp), method = 'bray', diag =TRUE)
D_chisq_R <- as.matrix(dis )
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
occurence <- as.data.frame(data_bee_sp) %>%
transmute_all(~if_else(. > 0, 1, 0))
occurence_r <- (occurence)
D_jacc_R <- as.matrix(vegdist(occurence_r, method = "jaccard"))
pheatmap(D_jacc_R, display_numbers = round(D_jacc_R, 2))
library("pheatmap")
dis <- vegdist(sqrt (data_bee_sp), method = 'bray', diag =TRUE)
D_chisq_R <- as.matrix(dis )
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
# Raréfaction à 33 individus (Parc Bonaert a le plus petit nbr d'individus)
bee.rare33 <- rarefy(data_bee_sp, sample = 33)
#dis <- vegdist(sqrt (bee.rare33), method = 'bray') # percentage cover data are transformed by square root
# Matrice dissimilarité d'abondance
dis <- vegdist(sqrt (bee.rare33), method = 'bray', diag =TRUE)
D_chisq_R <- as.matrix(dis)
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
# exporter en 8x8
# Raréfaction à 33 individus (Parc Bonaert a le plus petit nbr d'individus)
bee.rare33 <- rarefy(data_bee_sp, sample = 33)
dis <- vegdist((bee.rare33, method = 'bray') # percentage cover data are transformed by square root
# Raréfaction à 33 individus (Parc Bonaert a le plus petit nbr d'individus)
bee.rare33 <- rarefy(data_bee_sp, sample = 33)
dis <- vegdist(bee.rare33, method = 'bray') # percentage cover data are transformed by square root
# Matrice dissimilarité d'abondance
#dis <- vegdist(sqrt (bee.rare33), method = 'bray', diag =TRUE)
D_chisq_R <- as.matrix(dis)
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
# exporter en 8x8
# Matrice dissimilarité d'occurence
occurence <- as.data.frame(data_bee_sp) %>%
transmute_all(~if_else(. > 0, 1, 0))
occurence_r <- (occurence)
D_jacc_R <- as.matrix(vegdist(occurence_r, method = "jaccard"))
pheatmap(D_jacc_R, display_numbers = round(D_jacc_R, 2))
pheatmap(D_chisq_R, display_numbers = round(D_chisq_R, 2))
# Matrice dissimilarité d'occurence
occurence <- as.data.frame(data_bee_sp) %>%
transmute_all(~if_else(. > 0, 1, 0))
occurence_r <- (occurence)
D_jacc_R <- as.matrix(vegdist(occurence_r, method = "jaccard"))
pheatmap(D_jacc_R, display_numbers = round(D_jacc_R, 2))
pheatmap(D_jacc_R, display_numbers = round(D_jacc_R, 2))
# Matrice dissimilarité d'occurence
occurence <- as.data.frame(bee.rare33) %>%
transmute_all(~if_else(. > 0, 1, 0))
occurence_r <- (occurence)
D_jacc_R <- as.matrix(vegdist(occurence_r, method = "jaccard"))
pheatmap(D_jacc_R, display_numbers = round(D_jacc_R, 2))
View(occurence_r)
View(occurence)
# Matrice dissimilarité d'occurence
occurence <- as.data.frame(data_bee_sp) %>%
transmute_all(~if_else(. > 0, 1, 0))
occurence_r <- (occurence)
D_jacc_R <- as.matrix(vegdist(occurence_r, method = "jaccard"))
pheatmap(D_jacc_R, display_numbers = round(D_jacc_R, 2))
library("readxl")
library(dplyr)
library(plotly)
library(ggplot2)
library(viridis) # couleur daltonien
library(tidyr) # fonction gather
library(gplots)
library(RColorBrewer)
# Tour PC
setwd("D:/OneDrive - UMONS/UMONS/MA2/MEMOIRE/Statistique/R/STAT-MEMOIRE/RAW2/")
library("readxl")
library(dplyr)
library(plotly)
library(ggplot2)
library(viridis) # couleur daltonien
library(tidyr) # fonction gather
library(gplots)
library(RColorBrewer)
# Tour PC
#setwd("D:/OneDrive - UMONS/UMONS/MA2/MEMOIRE/Statistique/R/STAT-MEMOIRE/RAW2/")
# Laptop
setwd("C:/Users/Jordan/OneDrive - UMONS/UMONS/MA2/MEMOIRE/Statistique/R/STAT-MEMOIRE/RAW1/From DFF")
# Import
data_bee_sp <- read_excel("Site-vs-bee.xls") # pas clean !
#data_bee_genus <- read_excel("Site-vs-bee_genus.xls") # pas clean !
# Nettoyage
data_bee_sp <- filter(data_bee_sp, TOPO != "Condorcet" )
#data_bee_genus <- filter(data_bee_genus, TOPO != "Condorcet" )
# Rename
rename(data_bee_sp, "Site" = "TOPO") -> data_bee_sp
#rename(data_bee_genus, "Site" = "TOPO") -> data_bee_genus
# Remplacement des noms d'espèces désuets (colonne)
# Renommer B. sp_
data_bee_sp <- rename(data_bee_sp, "Bombus (Bombus) sp." = "Bombus (Bombus)  sp_" )
# Renommer B. lucorum et B. terrestris sous l'appellation Terrestribombus  sp.
data_bee_sp <- rename(data_bee_sp, "Bombus1" = "Bombus terrestris" )
data_bee_sp <- rename(data_bee_sp, "Bombus2" = "Bombus lucorum" )
# Addition des espèces
data_bee_sp$bombus_sp <- data_bee_sp$Bombus2 + data_bee_sp$Bombus1
# Supprimer colonne
data_bee_sp$Bombus1 <- NULL
data_bee_sp$Bombus2 <- NULL
# Renommer (vu qu'on travaille ici avec des collonnes il faut les additionner, c'est plus simple si ça aurait été des lignes)
data_bee_sp <- rename(data_bee_sp, "Terrestribombus  sp." = "bombus_sp")
# Renommer C. ericetorum
data_bee_sp <- rename(data_bee_sp, "Megachile ericetorum" = "Chalicodoma ericetorum" )
# Remplacement du noms de sites
data_bee_sp$Site[data_bee_sp$Site == "Les Gourmandes de la Procession"] <- "Gourmandes de la Procession"
# Conservation des NA pour la heatmap
hm.data_bee_sp <- data_bee_sp
# Remodeler le jeux de données pour le heatmap
hm.bee_sp <- gather(hm.data_bee_sp, key="sp", value="nbr", 2:ncol(hm.data_bee_sp)) # On prend pas la première colonne (site) et on va jusqu'à la dernière colonne (2 à 93) (xylo)
hm.bee_sp$sp <- factor(hm.bee_sp$sp)
hm.bee_sp <- hm.bee_sp %>%
# convert state to factor and reverse order of levels
mutate(sp=factor(sp, levels=rev(sort(unique(sp)))))
hm.bee_sp <- select(hm.bee_sp, sp, Site, nbr)
ggplot(hm.bee_sp, aes(x = Site, y = sp, fill = nbr)) +
labs(title = "Abondance des abeilles sauvages", x = '', y = '') + # Titre et titre axe
geom_tile(color = "black") +
coord_fixed() +
guides(fill = guide_colourbar(label = FALSE,
ticks = FALSE)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0, size = 3, hjust = 0),
axis.text.y = element_text(size = 3, hjust = 0,  vjust = 0.4),
legend.position = "left", # position légende
legend.title = element_text(size = 6), # Taille titre légende texte
legend.text = element_text(size = 6), # Taille légende échelle texte
plot.title = element_text(size = 8, hjust = 0.5), # Taille titre texte
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(.65,"cm")) +
scale_y_discrete(position = "right") + # y label à droite
guides(fill = guide_colourbar(title = "Abondance")) + # Titre légende
#scale_fill_distiller(palette = "Reds", direction = +1)  # couleur
#scale_fill_distiller(palette = "YlOrBr", direction = 1, na.value = "grey50")
scale_fill_viridis(option = "B", direction = -1, na.value = "white")  # couleur
#sum(hm.bee_sp$nbr) # total abeille
ggsave(filename = "../Output/heatmap.pdf", device = cairo_pdf)
ggsave(filename = "../Output/heatmap.png")
hm.bee_sp <- gather(hm.data_bee_sp, key="sp", value="nbr", 2:ncol(hm.data_bee_sp)) # On prend pas la première colonne (site) et on va jusqu'à la dernière colonne (2 à 93) (xylo)
hm.bee_sp$sp <- factor(hm.bee_sp$sp)
hm.bee_sp <- hm.bee_sp %>%
# convert state to factor and reverse order of levels
mutate(sp=factor(sp, levels=rev(sort(unique(sp)))))
hm.bee_sp <- select(hm.bee_sp, sp, Site, nbr)
ggplot(hm.bee_sp, aes(x = Site, y = sp, fill = nbr)) +
labs(title = "Abondance des abeilles sauvages", x = '', y = '') + # Titre et titre axe
geom_tile(color = "black") +
coord_fixed() +
guides(fill = guide_colourbar(label = FALSE,
ticks = FALSE)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0, size = 3, hjust = 0),
axis.text.y = element_text(size = 3, hjust = 0,  vjust = 0.4),
legend.position = "left", # position légende
legend.title = element_text(size = 6), # Taille titre légende texte
legend.text = element_text(size = 6), # Taille légende échelle texte
plot.title = element_text(size = 8, hjust = 0.5), # Taille titre texte
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(.65,"cm")) +
scale_y_discrete(position = "right") + # y label à droite
guides(fill = guide_colourbar(title = "Abondance")) + # Titre légende
#scale_fill_distiller(palette = "Reds", direction = +1)  # couleur
#scale_fill_distiller(palette = "YlOrBr", direction = 1, na.value = "grey50")
scale_fill_viridis(option = "B", direction = -1, na.value = "white")  # couleur
View(data_bee_sp)
# Tour PC
#setwd("D:/OneDrive - UMONS/UMONS/MA2/MEMOIRE/Statistique/R/STAT-MEMOIRE/RAW2")
# Laptop
setwd("C:/Users/Jordan/OneDrive - UMONS/UMONS/MA2/MEMOIRE/Statistique/R/STAT-MEMOIRE/RAW2")
# Import
IUCN_redlist <- read_excel("IUCN_bee_sp-each-site(genus-and-familly).xlsx")
# Réécriture des noms de familles
IUCN_redlist$familly[IUCN_redlist$familly == "ANDRENIDAE"] <- "Andrenidae"
IUCN_redlist$familly[IUCN_redlist$familly == "APIDAE"] <- "Apidae"
IUCN_redlist$familly[IUCN_redlist$familly == "COLLETIDAE"] <- "Colletidae"
IUCN_redlist$familly[IUCN_redlist$familly == "HALICTIDAE"] <- "Halictidae"
IUCN_redlist$familly[IUCN_redlist$familly == "MEGACHILIDAE"] <- "Megachilidae"
IUCN_redlist$familly[IUCN_redlist$familly == "MELITTIDAE"] <- "Melittidae"
# Addition des espèces avec la catégorie IUCN
IUCN_sp <- aggregate(N ~ sp + category, data = IUCN_redlist, sum)
# Addition des genres avec la catégorie IUCN
IUCN_gen <- aggregate(N ~ genus + category, data = IUCN_redlist, sum)
# Addition des familles avec la catégorie IUCN
IUCN_fam <- aggregate(N ~ familly + category, data = IUCN_redlist, sum)
# Import
# Tour PC
setwd("D:/OneDrive - UMONS/UMONS/MA2/MEMOIRE/Statistique/R/STAT-MEMOIRE/RAW2")
# Import
# Tour PC
#setwd("D:/OneDrive - UMONS/UMONS/MA2/MEMOIRE/Statistique/R/STAT-MEMOIRE/RAW2")
# Laptop
setwd("C:/Users/Jordan/OneDrive - UMONS/UMONS/MA2/MEMOIRE/Statistique/R/STAT-MEMOIRE/RAW2")
# Import
soil <- read_excel("Soil_R.xlsx")
granulo <- read_excel("granulo.xlsx")
SpecCondStat <- read_excel("SpecCondStat.xls")
# Nom plus compact
SCS <- SpecCondStat
# Retirer le site de Condorcet
SCS <- filter(SCS, TOPO != "Condorcet" )
# Renommer plus simplement
rename(SCS, "sp" = "SPEC.TAXPRIO" ) -> SCS
rename(SCS, "sites" = "TOPO" ) -> SCS
# Retirer les observations contenant l'espèce : "XXX"
# SCS <- filter(SCS, SPEC.TAXPRIO != "Bombus (Bombus)  sp." )
# Remplacement des noms d'espèces désuets
SCS$sp[SCS$sp == "Bombus lucorum"] <- "Terrestribombus  sp."
SCS$sp[SCS$sp == "Bombus terrestris"] <- "Terrestribombus  sp."
SCS$sp[SCS$sp == "Chalicodoma ericetorum"] <- "Megachile ericetorum"
SCS$sp[SCS$sp == "Halictus tumulorum"] <- "Seladonia tumulorum"
# Remplacement du noms de sites
SCS$sites[SCS$sites == "Les Gourmandes de la Procession"] <- "Gourmandes de la Procession"
soil$Site[soil$Site == "Les Gourmandes de la Procession"] <- "Gourmandes de la Procession"
granulo$Site[granulo$Site == "Les Gourmandes de la Procession"] <- "Gourmandes de la Procession"
#### Abbréger le nom des sites
# Liste des Potagers
Potagers <- c("Abbaye St-Denis", "Rue de l'Egalite", "Chasse Cambier", "Mel Legumes", "Gourmandes de la Procession", "Jean d'Avesnes", "Parc du bois de Mons", "Jardin Suspendu", "Ecole de l'Esperance", "Fond du petit marais")
# Liste des Parcs
Parcs <- c("Village des abeilles", "Siege social", "Parc du Beffroi", "Stievenart", "Parc Bonaert")
### Sol
## Metaux
# Créer une colonne Code en fonction des types de sites
soil$Code <- fct_collapse(
soil$Site,
"Potager" = Potagers,
"Parc" = Parcs)
library(reshape2)
# Nom plus compact
SCS <- SpecCondStat
# Retirer le site de Condorcet
SCS <- filter(SCS, TOPO != "Condorcet" )
# Renommer plus simplement
rename(SCS, "sp" = "SPEC.TAXPRIO" ) -> SCS
rename(SCS, "sites" = "TOPO" ) -> SCS
# Retirer les observations contenant l'espèce : "XXX"
# SCS <- filter(SCS, SPEC.TAXPRIO != "Bombus (Bombus)  sp." )
# Remplacement des noms d'espèces désuets
SCS$sp[SCS$sp == "Bombus lucorum"] <- "Terrestribombus  sp."
SCS$sp[SCS$sp == "Bombus terrestris"] <- "Terrestribombus  sp."
SCS$sp[SCS$sp == "Chalicodoma ericetorum"] <- "Megachile ericetorum"
SCS$sp[SCS$sp == "Halictus tumulorum"] <- "Seladonia tumulorum"
# Remplacement du noms de sites
SCS$sites[SCS$sites == "Les Gourmandes de la Procession"] <- "Gourmandes de la Procession"
soil$Site[soil$Site == "Les Gourmandes de la Procession"] <- "Gourmandes de la Procession"
granulo$Site[granulo$Site == "Les Gourmandes de la Procession"] <- "Gourmandes de la Procession"
#### Abbréger le nom des sites
# Liste des Potagers
Potagers <- c("Abbaye St-Denis", "Rue de l'Egalite", "Chasse Cambier", "Mel Legumes", "Gourmandes de la Procession", "Jean d'Avesnes", "Parc du bois de Mons", "Jardin Suspendu", "Ecole de l'Esperance", "Fond du petit marais")
# Liste des Parcs
Parcs <- c("Village des abeilles", "Siege social", "Parc du Beffroi", "Stievenart", "Parc Bonaert")
### Sol
## Metaux
# Créer une colonne Code en fonction des types de sites
soil$Code <- fct_collapse(
soil$Site,
"Potager" = Potagers,
"Parc" = Parcs)
# Preparation des données
data_bee_sp <- select(SCS, sp, N, sites)
data_bee_sp <- as.data.frame(data_bee_sp)
data_bee_sp <- aggregate(N ~ sp + sites, data = data_bee_sp, sum)
data_bee_sp <- xtabs(N ~ sites + sp, data_bee_sp)
data_bee_sp <- type.convert(data_bee_sp)
View(data_bee_sp)
# Load the required packages
library(dplyr)
library(vegan) # specpool () estimateR() poolaccum() estaccumR()
library(ggplot2)
library(forcats )
library("readxl")
# Import
# Tour PC
#setwd("D:/OneDrive - UMONS/UMONS/MA2/MEMOIRE/Statistique/R/STAT-MEMOIRE/RAW2")
# Laptop
setwd("C:/Users/Jordan/OneDrive - UMONS/UMONS/MA2/MEMOIRE/Statistique/R/STAT-MEMOIRE/RAW2")
# Import
soil <- read_excel("Soil_R.xlsx")
granulo <- read_excel("granulo.xlsx")
SpecCondStat <- read_excel("SpecCondStat.xls")
# Nom plus compact
SCS <- SpecCondStat
# Retirer le site de Condorcet
SCS <- filter(SCS, TOPO != "Condorcet" )
# Renommer plus simplement
rename(SCS, "sp" = "SPEC.TAXPRIO" ) -> SCS
rename(SCS, "sites" = "TOPO" ) -> SCS
# Retirer les observations contenant l'espèce : "XXX"
# SCS <- filter(SCS, SPEC.TAXPRIO != "Bombus (Bombus)  sp." )
# Remplacement des noms d'espèces désuets
SCS$sp[SCS$sp == "Bombus lucorum"] <- "Terrestribombus  sp."
SCS$sp[SCS$sp == "Bombus terrestris"] <- "Terrestribombus  sp."
SCS$sp[SCS$sp == "Chalicodoma ericetorum"] <- "Megachile ericetorum"
SCS$sp[SCS$sp == "Halictus tumulorum"] <- "Seladonia tumulorum"
# Remplacement du noms de sites
SCS$sites[SCS$sites == "Les Gourmandes de la Procession"] <- "Gourmandes de la Procession"
soil$Site[soil$Site == "Les Gourmandes de la Procession"] <- "Gourmandes de la Procession"
granulo$Site[granulo$Site == "Les Gourmandes de la Procession"] <- "Gourmandes de la Procession"
#### Abbréger le nom des sites
# Liste des Potagers
Potagers <- c("Abbaye St-Denis", "Rue de l'Egalite", "Chasse Cambier", "Mel Legumes", "Gourmandes de la Procession", "Jean d'Avesnes", "Parc du bois de Mons", "Jardin Suspendu", "Ecole de l'Esperance", "Fond du petit marais")
# Liste des Parcs
Parcs <- c("Village des abeilles", "Siege social", "Parc du Beffroi", "Stievenart", "Parc Bonaert")
### Sol
## Metaux
# Créer une colonne Code en fonction des types de sites
soil$Code <- fct_collapse(
soil$Site,
"Potager" = Potagers,
"Parc" = Parcs)
# Garder pour rownames
soil_site_name <- select(soil, Site)
# Garder les métaux seulement
metal <- soil[, c("As", "Cd", "Cr", "Cu", "Hg", "Pb", "Ni", "Zn")]
row.names(metal) <- soil_site_name$Site
## Granulo
# Créer une colonne Code en fonction des types de sites
granulo$Code <- fct_collapse(
granulo$Site,
"Potager" = Potagers,
"Parc" = Parcs)
# substring prend les premiers caractères, abbreviate abrège comme il le sent
granulo$code_site <- paste(substring(granulo$Code, 0,3),"-", abbreviate(granulo$Site))
# retirer les apostrophes
granulo$code_site <- gsub("'", "", granulo$code_site)
# Azote (Nitrogen)
# Nitrate NO3, ammonium NH4, azote total N
# Garder les composées azotées seulement
azote <- soil[,9:12]
azote <- azote[,-1]
row.names(azote) <- soil_site_name$code_site
# Preparation des données
data_bee_sp <- select(SCS, sp, N, sites)
data_bee_sp <- as.data.frame(data_bee_sp)
data_bee_sp <- aggregate(N ~ sp + sites, data = data_bee_sp, sum)
data_bee_sp <- xtabs(N ~ sites + sp, data_bee_sp)
data_bee_sp <- type.convert(data_bee_sp)
str(metal)
summary(metal)
metal_scale <- scale(metal, center = TRUE, scale = TRUE)
str(metal_scale)
summary(metal_scale)
rda(data_bee_sp ~ metal_scale)
cca(data_bee_sp ~ 1, metal_scale)
spe <- data_bee_sp
# le "." signifie contre toutes les var env; 1 : signifie aucune var env
spe.cca <- cca(spe ~ ., metal)
summary(spe.cca) # Scaling 2 (default)
# Unadjusted and adjusted R^2 - like statistics
RsquareAdj(spe.cca)
anova(spe.cca, by="term", permutations = how(nperm=9999))
anova(spe.cca, by="mar", permutations = how(nperm=9999))
anova(spe.cca, by="axis", perm=500, permutations = how(nperm=9999))
vif.cca(spe.cca)
spe <- data_bee_sp
spe.cca <- cca(spe ~ ., metal[c("Zn", "Cd", "Pb")])
summary(spe.cca) # Scaling 2 (default)
# Unadjusted and adjusted R^2 - like statistics
RsquareAdj(spe.cca)
# by =  axis : évaluation des axes
# perm.max : faut l'obliger à les faire il peut arrêter avant si non
# enfaite il ignore tout de même, faut utiliser nperm
# model = "direct" : permute les communautés
anova.cca(spe.cca, by="axis", permutations = how(nperm=9999),permu=10000, perm.max = 10000, model="direct")
spe <- data_bee_sp
spe.cca <- cca(spe ~ ., as.data.frame(metal_scale))
summary(spe.cca) # Scaling 2 (default)
# Unadjusted and adjusted R^2 - like statistics
RsquareAdj(spe.cca)
par(mfrow = c(1, 2))
# Scaling 1: species scoresscaled to the relative eigenvalues,
# sites are weighted averages of the species
plot(spe.cca,
scaling = 1,
display = c("sp", "lc", "cn"),
main = "Triplot CCA spe ~ env3 - scaling 1"
)
# Default scaling 2: site scores scaled to the relative
# eigenvalues, species are weighted averages of the sites
plot(spe.cca,
display = c("sp", "lc", "cn"),
main = "Triplot CCA spe ~ env3 - scaling 2"
)
# CCA scaling 1 biplot without species (using lc site scores)
plot(spe.cca,
scaling = 1,
display = c("lc", "cn"),
main = "Biplot CCA spe ~ env3 - scaling 1"
)
# CCA scaling 2 biplot with species but without sites
plot(spe.cca,
scaling = 2,
display = c("sp", "cn"),
main = "Biplot CCA spe ~ env3 - scaling 2"
)
# Permutation test of the overall analysis
anova(spe.cca, permutations = how(nperm = 999))
# Permutation test of each axis
anova(spe.cca, by = "axis", permutations = how(nperm = 999))
# CCA-based forward selection using vegan's ordistep()
# This function allows the use of factors like 'slo' in env3
cca.step.forward <-
ordistep(cca(spe ~ 1, data = env3),
scope = formula(spe.cca),
direction = "forward",
permutations = how(nperm = 199))
# Complete CCA 3D triplot
ordirgl(spe.cca.pars, type = "t", scaling = 2)
spe <- data_bee_sp
spe.cca <- cca(spe ~ ., metal[c("Zn", "Cd", "As", "Cr", "Hg")])
summary(spe.cca) # Scaling 2 (default)
# Unadjusted and adjusted R^2 - like statistics
RsquareAdj(spe.cca)
spe <- data_bee_sp
spe.cca <- cca(spe ~ ., metal[c("Zn", "Cd", "As", "Cr", "Hg", "Ni")])
summary(spe.cca) # Scaling 2 (default)
# Unadjusted and adjusted R^2 - like statistics
RsquareAdj(spe.cca)
spe <- data_bee_sp
spe.cca <- cca(spe ~ ., metal_scale[c("Zn", "Cd", "As", "Cr", "Hg", "Ni")])
spe <- data_bee_sp
spe.cca <- cca(spe ~ ., metal[c("Zn", "Cd", "As", "Cr", "Hg", "Ni")])
summary(spe.cca) # Scaling 2 (default)
# Unadjusted and adjusted R^2 - like statistics
RsquareAdj(spe.cca)
